# Transform tumor sample TOP-RNA FPKM data to RNA-seq FPKM
# Considering the residual errors in prediction
# Tentatively, 1,000 expression sets per sample were generated
# Tumor TOP files should be saved in tumor name directory

# loading training data
path = "/mnt/HDD8TB/CaSPRE/Tumor_TOP_values/*.npy"
files = glob(path)
files.sort()
trainImg = []
trainLabel = []
j = 1
num = len(files)
replicate = 1000

# expression data generation
for img in files:
    for repli  in range(1000): 
        print("\r" + str(j) + "/" + str(repli) + "/" + str(num) , end="")
        tmp = np.load(img)
        index_listのj -> iに変更
        # 正規分布でのランダムサンプリングでベクトル作成
        error_norm_1 = np.random.normal(loc = 0, scale = 1, size = 1375)
        error_norm_2 = np.random.normal(loc = 0, scale = 1, size = 1375)
        tmp = np.power(16, tmp + 0.5) - 1
        tmp = const_mean + tmp * intercept_mean + pred_mean_se * error_norm_1 + error_norm_2 * pred_residual_se
        tmp = np.log2(tmp + 1) / 16 - 0.5
        trainImg.append(np.expand_dims(tmp, axis=0))
        j += 1
        image_list = np.asarray(trainImg)
        label = pathlib.Path(img).parent.name
        trainLabel.append(label)
np.savez_compressed("/mnt/HDD8TB/CaSPRE/Tumor_transformed/" + os.path.basename(img).replace(".FPKM.txt.npy", "") + "_image.npz", image_list)
trainLabel = pd.DataFrame(trainLabel)
trainLabel.to_csv("/mnt/HDD8TB/CaSPRE/Tumor_transformed/" + os.path.basename(img).replace(".FPKM.txt.npy", "") + "_label.tsv", index=False, sep='\t')
